Intent: Given a language,
 define a representation for its grammar along with an interpreter that uses the representation to interpret sentences in the language.
 
 Applicability: Use the Interpreter pattern when there is a language to interpret,
  and you can represent statements in the language as abstract syntax trees. The Interpreter pattern works best when

the grammar is simple. For complex grammars, the class hierarchy for the grammar becomes large and unmanageable. 
Tools such as parser generators are a better alternative in such cases. 
They can interpret expressions without building abstract syntax trees, which can save space and possibly time

efficiency is not a critical concern. 
The most efficient interpreters are usually not implemented by interpreting parse trees directly but by first translating them into another form.
 For example, regular expressions are often transformed into state machines. 
 But even then, the translator can be implemented by the Interpreter pattern, so the pattern is still applicable
 
 目的：给定一个语言，
 定义它的文法的一种表示，以及使用该表示来解释语言中的句子翻译。
 
 适用范围：使用解释器模式时，有一个语言来解释，
  并可以代表了语言的抽象语法树声明。在解释器模式时效果最好

语法很简单。对于复杂的语法，为语法类的层次变大，难以管理。
工具如分析器发电机是在这种情况下，一个更好的选择。
他们可以解释表达无需建立抽象语法树，可节省空间和时间可能

效率不是关键问题。
最有效的口译员通常不会通过解释语法树直接，但首先将其转化为另一种形式来实现。
 例如，正则表达式通常被转化为状态机。
 但即使这样，翻译者可以通过解释器模式实现的，所以该图案仍然适用