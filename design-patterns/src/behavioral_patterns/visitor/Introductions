Intent: Represent an operation to be performed on the elements of an object structure. 
Visitor lets you define a new operation without changing the classes of the elements on which it operates.

Applicability: Use the Visitor pattern when

an object structure contains many classes of objects with differing interfaces,
 and you want to perform operations on these objects that depend on their concrete classes

many distinct and unrelated operations need to be performed on objects in an object structure,
 and you want to avoid "polluting" their classes with these operations. 
 Visitor lets you keep related operations together by defining them in one class. 
 When the object structure is shared by many applications, use Visitor to put operations in just those applications that need them
 
the classes defining the object structure rarely change, but you often want to define new operations over the structure. 
Changing the object structure classes requires redefining the interface to all visitors, which is potentially costly. 
If the object structure classes change often, then it's probably better to define the operations in those classes

意图：代表一个操作要对一个对象结构中的元素进行。
访客可以让你定义一个新的操作，而不会改变所操作的元素的类。

适用范围：使用访问者模式时，

一个对象结构包含很多类对象具有不同的接口，
 并且要对依赖于它们具体的类这些对象执行操作

许多不同的和无关的操作需要在对象结构上的对象执行，
 而要避免“污染”它们的类这些操作。
 它使你可以通过定义它们在一个类中保持相关业务合作。
 当物体的结构是由许多应用程序共享，利用游客把业务只是那些需要它们的应用程序
 
定义对象结构的类很少改变，但你经常要在结构上定义新的操作。
改变对象结构类需要重新定义接口的所有游客，这是潜在的昂贵。
如果对象结构类经常改变，那么它可能更好地在这些类中定义的操作